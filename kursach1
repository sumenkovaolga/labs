package Garden;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.RowFilter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowSorter.SortKey;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class Table extends javax.swing.JFrame {
    /**
     * Creates new form Table
     */
     private String FILENAME = "result.json";
    
    public Table() {
        initComponents();
        dataPanel.setVisible(false);
        searchPanel.setVisible(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        dataPanel = new javax.swing.JPanel();
        OnePayTextBox = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        AddButton = new javax.swing.JButton();
        CountTextBox = new javax.swing.JTextField();
        FIOLabel = new javax.swing.JLabel();
        countLabel = new javax.swing.JLabel();
        payLabel = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        FIOTextBox = new javax.swing.JTextField();
        SortButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        SearchTextField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ФИО", "КОЛИЧЕСТВО СОТОК", "ВЗНОС ЗА СОТКУ", "СУММА ЗА ГОД"
            }
        ));
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultTable);

        AddButton.setText("Добавить");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        FIOLabel.setText("ФИО");

        countLabel.setText("КОЛИЧЕСТВО СОТОК");

        payLabel.setText("ВЗНОС ЗА СОТКУ ");

        messageLabel.setForeground(new java.awt.Color(255, 0, 0));

        UpdateButton.setText("Обновить");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Удалить");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        SortButton.setText("Сортировка");
        SortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dataPanelLayout = new javax.swing.GroupLayout(dataPanel);
        dataPanel.setLayout(dataPanelLayout);
        dataPanelLayout.setHorizontalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dataPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dataPanelLayout.createSequentialGroup()
                                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(payLabel)
                                    .addComponent(countLabel)
                                    .addComponent(FIOLabel))
                                .addGap(14, 14, 14)
                                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FIOTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(OnePayTextBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                        .addComponent(CountTextBox, javax.swing.GroupLayout.Alignment.LEADING)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(dataPanelLayout.createSequentialGroup()
                        .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dataPanelLayout.createSequentialGroup()
                                .addComponent(AddButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UpdateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SortButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        dataPanelLayout.setVerticalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FIOLabel)
                    .addComponent(FIOTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CountTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OnePayTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(payLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(UpdateButton)
                    .addComponent(DeleteButton)
                    .addComponent(SortButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchLabel.setText("Поиск:");

        SearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchLabel))
                .addContainerGap())
        );

        Menu.setText("Меню");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("Работа с данными");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Menu.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem2.setText("Поиск данных");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        Menu.add(jMenuItem2);

        jMenu1.setText("Работа с файлом");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem3.setText("Запись в JSON");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem5.setText("Чтение из JSON");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        Menu.add(jMenu1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem4.setText("О программе");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        Menu.add(jMenuItem4);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem6.setText("Выход");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        Menu.add(jMenuItem6);

        jMenuBar1.add(Menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(dataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    /**
     * Событие - обработчик кнопки "Добавить"
     */
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {                                          
        messageLabel.setText("");
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        if(!FIOTextBox.getText().trim().equals("") 
                && !CountTextBox.getText().trim().equals("") 
                && !OnePayTextBox.getText().trim().equals(""))
        {
            int count = 0;
            int onePay = 0;
            try
            {
                count = Integer.parseInt(CountTextBox.getText());
                onePay = Integer.parseInt(OnePayTextBox.getText());
                model.addRow(new Object[]{FIOTextBox.getText(), CountTextBox.getText(), OnePayTextBox.getText(), count*onePay });
            }
            catch(Exception e)
            {
                messageLabel.setText("Количество или взнос не является числом!");
                messageLabel.setVisible(true);
            }
        }
        else
        {
            messageLabel.setText("Не все данные заполнены!");
            messageLabel.setVisible(true);
        }
    }                                         

    /**
     * Событие - обработчик кнопки "Обновить"
     */
    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        messageLabel.setText("");
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        try
        {
            if(resultTable.getSelectedRow()==-1)
            {
                if(resultTable.getRowCount()==0)
                {
                    messageLabel.setText("Таблица пустая!");
                }
                else
                {
                    messageLabel.setText("Запись не выбрана!");
                }
            }
            else
            {
                int count = Integer.parseInt(CountTextBox.getText());
                int onePay = Integer.parseInt(OnePayTextBox.getText());
                model.setValueAt(FIOTextBox.getText(), resultTable.getSelectedRow(), 0);
                model.setValueAt(CountTextBox.getText(), resultTable.getSelectedRow(), 1);
                model.setValueAt(OnePayTextBox.getText(), resultTable.getSelectedRow(), 2);
                model.setValueAt(count*onePay, resultTable.getSelectedRow(), 3);
            }
        }
        catch(Exception ex)
        {
            messageLabel.setText("Неизвестная ошибка");
        }
    }                                            
    
    /**
     * Событие - обработчик клика по таблице
     */
    private void resultTableMouseClicked(java.awt.event.MouseEvent evt) {                                         
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        FIOTextBox.setText(model.getValueAt(resultTable.getSelectedRow(), 0).toString());
        CountTextBox.setText(model.getValueAt(resultTable.getSelectedRow(), 1).toString());
        OnePayTextBox.setText(model.getValueAt(resultTable.getSelectedRow(), 2).toString());
    }                                        

    /**
     * Событие - обработчик кнопки "Удалить"
     */
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        if(resultTable.getSelectedRow()==-1)
        {
            if(resultTable.getRowCount()==0)
            {
                messageLabel.setText("Таблица пустая!");
            }
            else
            {
                messageLabel.setText("Запись не выбрана!");
            }
        }
        else
        {
            model.removeRow(resultTable.getSelectedRow());
        }
    }                                            

    /**
     * Событие - обработчик выбора пункта меню "Работа с данными"
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        dataPanel.setVisible(true);
    }                                          

    /**
     * Событие - обработчик кнопки "Сортировать"
     */
    private void SortButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        TableRowSorter sorter=new TableRowSorter(resultTable.getModel()); //Создаем сортировщик
        sorter.setSortable(0, true); //Указываем, что сортировать будем в первой колонке
        sorter.setSortable(1, false); // а в других нет
        sorter.setSortable(2, false);
        sorter.setSortable(3, false);
        ArrayList<SortKey> keys=new ArrayList<SortKey>(); // создаем коллецию ключей сортировки
        keys.add(new SortKey(0, SortOrder.DESCENDING));  //Записываем два ключа !!! (если задать
        keys.add(new SortKey(0, SortOrder.DESCENDING));  //один раз, то сортировщик по-умолчанию
                                                                              //DefaultRowSorter от которого происходит
                                                                              //TableRowSorter автоматически добавит
                                                                             //SortOrder.ASCENDING
        sorter.setSortKeys(keys);                                   //Добавляем ключи к сортировщику
        sorter.toggleSortOrder(0);                                  //Сортируем первую колонку
        sorter.setSortsOnUpdates(true);                         //Указываем автоматически сортировать
                                                                            //при изменении модели данных
        resultTable.setRowSorter(sorter); 
    }                                          

    /**
     * Событие - обработчик поиска
     */
    private void SearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {                                            
        String query = SearchTextField.getText();
        
        Filter(query);
    }                                           

    /**
     * @param query строка для поиска
     */
    private void Filter(String query)
    {
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        
        resultTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));
    }    
    
    /**
     * Событие - обработчик выбора пункта меню "Поиск данных"
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(resultTable.getRowCount()==0)
        {
           messageLabel.setText("Таблица пустая!");
           dataPanel.setVisible(true);
        }
        else
        {
            searchPanel.setVisible(true);
        }
    }                                          

    /**
     * Событие - обработчик выбора пункта меню "О программе"
     */
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        JOptionPane.showMessageDialog(jFrame1, "Программа для сопровождения системы \nучета годовых взносов садового товарищества \nна языке Java\n2016г.");
    }                                          

    /**
     * Событие - обработчик выбора пункта меню "Запись в файл"
     */
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(resultTable.getRowCount()==0)
        {
           messageLabel.setText("Таблица пустая!");
           dataPanel.setVisible(true);
        }
        else
        {
            JSONObject object = new JSONObject();
            String resultString;
            for(int i=0; i<resultTable.getRowCount();i++)
            {
                resultString = resultTable.getValueAt(i, 0).toString() + " "
                              +resultTable.getValueAt(i, 1).toString() + " "
                              +resultTable.getValueAt(i, 2).toString() + " "
                              +resultTable.getValueAt(i, 3).toString();
                
                object.put(i, resultString);
            }
            
            try (FileWriter writer = new FileWriter(FILENAME))
            {
                writer.write(object.toJSONString());
                writer.flush();
                writer.close();
                messageLabel.setText("Файл записан!");
            } catch (IOException ex) 
            {
                
            }
        }
    }                                          

    /**
     * Событие - обработчик выбора пункта меню "Чтение из файла"
     */
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        JSONParser parser = new JSONParser();
        DefaultTableModel model = (DefaultTableModel) resultTable.getModel();
        try 
        {
            JSONObject object = (JSONObject)parser.parse(new FileReader(FILENAME));
            String str;
            String[] strArray;
            for(int i=0; i<object.size(); i++)
            {
                str = (String)object.get(String.valueOf(i));
                strArray = str.trim().split("\\s+");
                model.addRow(new Object[]{strArray[0], strArray[1], strArray[2], strArray[3] });
            }
            dataPanel.setVisible(true);
            messageLabel.setText("Данные заполнены из файла!");

        } catch (IOException | ParseException ex) 
        {
            
        }
    }                                          

    /**
     * Событие - обработчик выбора пункта меню "Выход"
     */
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.exit(0);
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Table().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton AddButton;
    private javax.swing.JTextField CountTextBox;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JLabel FIOLabel;
    private javax.swing.JTextField FIOTextBox;
    private javax.swing.JMenu Menu;
    private javax.swing.JTextField OnePayTextBox;
    private javax.swing.JTextField SearchTextField;
    private javax.swing.JButton SortButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel countLabel;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JLabel payLabel;
    private javax.swing.JTable resultTable;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchPanel;
    // End of variables declaration                   
}

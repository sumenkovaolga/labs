import sys

class Expr:
    def __str__(self):
        return self.symbolic

    def get_value(self):
        return self.value

    def print(self):
        print('{} = {}\n'.format(self.symbolic, self.value))

class Drob(Expr):
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.value = a / b
        self.symbolic = '{}/{}'.format(a, b)

class Koef(Expr):
    def __init__(self, value):
        self.value = value
        self.symbolic = str(value)

class Monom(Expr):
    def __init__(self, products):
        self.products = products
        self.symbolic = str(products[0])
        self.value = products[0].get_value()
        for prod in products[1:]:
            self.symbolic += '*{}'.format(prod)
            self.value *= prod.get_value()

class Polynom(Expr):
    def __init__(self, monoms):
        self.monoms = monoms
        self.symbolic = str(monoms[0])
        self.value = monoms[0].get_value()
        for monom in monoms[1:]:
            self.symbolic += ' + {}'.format(monom)
            self.value += monom.get_value()

def test():
    dr1 = Drob(1,2)
    print(dr1)

    k1 = Koef(5)
    k2 = Koef(7)
    monom1 = Monom([k1, dr1, k2])
    monom1.print()
    
    dr2 = Drob(1,3)
    k3 = Koef(3)
    monom2 = Monom([dr2, k3])
    monom2.print()

    polynom = Polynom([monom1, monom2])
    polynom.print()


def main():
    if len(sys.argv) < 2:
        print('Ошибка: недостаточно входных аргументов.')
        usage()
        exit(1)
        
    args = ' '.join(sys.argv[1:])
    cmd, params = args.split('=')
    if cmd.strip() != '--poly':
        print('Ошибка: неправильные входные аргументы.')
        usage()
        exit(1)

    divisors = params.split(',')
    monoms = []
    for d in divisors:
        monoms += [Monom([Drob(1,int(d)), Koef(3)])]
        #monoms[-1].print()
    polynom = Polynom(monoms)
    polynom.print()
    

def usage():
    print('Пример использования:')
    print('\tpython {} --poly=1,2,3,4,5'.format(sys.argv[0]))


if __name__ == '__main__':
    main()
    pass





import sys
import matplotlib.pyplot as plt
import math
import random
import time

import numpy as np


plotter = None
sma = None

class InputGenerator():
    @staticmethod
    def randomize(count, ymin, ymax):
        for x in range(count):
            y = random.randint(ymin, ymax)
            s = sma.add_point(y)

            plotter.update(x, y, s)
            time.sleep(0.1)

    @staticmethod
    def tangens(step, xmin, xmax):
        step_inv = int(1/step)
        for x in range(xmin * step_inv, xmax * step_inv):
            y = math.tan(x)
            s = sma.add_point(y)

            plotter.update(x * step, y, s)

    @staticmethod
    def user_input():
        count = -1
        while count < 25:
            count = InputUtils.get_uint('Введите общее количество точек: ')
        
        for x in range(count):
            y = InputUtils.get_int('Введите значение точки №{}: '.format(x))
            s = sma.add_point(y)

            plotter.update(x, y, s)


class InputUtils():
    @staticmethod
    def get_int(text):
        i = None
        while True:
            try:
                i = int(input(text))
                break
            except Exception as e:
                print('Ошибка {}'.format(e))
        return i
    
    @staticmethod
    def get_uint(text):
        i = -1
        while i < 0:
            try:
                i = int(input(text))
            except Exception as e:
                print('Ошибка {}'.format(e))
        return i


class Plotter():
    def __init__(self):
        self.figure, self.ax = plt.subplots()
        self.line_orig, = self.ax.plot([], [], label='Original')
        self.line_sma, = self.ax.plot([], [], label='SMA')
        self.ax.legend(loc='lower right')
        plt.ion()
        plt.show()
        
    def update(self, new_x, new_y, new_sma):
        old_xdata = list(self.line_orig.get_xdata())
        old_ydata = list(self.line_orig.get_ydata())
        self.line_orig.set_xdata(old_xdata + [new_x])
        self.line_orig.set_ydata(old_ydata + [new_y])
        
        old_smadata = list(self.line_sma.get_ydata())
        self.line_sma.set_xdata(old_xdata + [new_x])
        self.line_sma.set_ydata(old_smadata + [new_sma])

        # redraw
        self.ax.relim()
        self.ax.autoscale_view()
        self.figure.canvas.draw()
        self.figure.canvas.flush_events()
        
    pass


class SMA():
    def __init__(self, window_size):
        self.count = 0
        self.window = window_size
        self.sum = 0
        self.result = []
        self.window_values = []

    def add_point(self, value):
        self.count += 1
        if self.count <= self.window:
            self.sum += value
            self.result += [self.sum / self.count]
        else:
            self.sum += value - self.window_values[0]
            self.window_values = self.window_values[1:]
            self.result += [self.sum / self.window]
        self.window_values += [value]

        return self.result[-1]


def main():
    global plotter, sma
    window_size = InputUtils.get_uint('Введите размер окна: ')
    #window_size = 10

    plotter = Plotter()
    sma = SMA(window_size)

    print('Доступные режимы для входных последовательностей:')
    print('  1. Генерация случайных чисел')
    print('  2. Применение тригонометрического тангенса')
    print('  3. Ввод пользователя')
    mode = -1
    while mode < 1 or mode > 3:
        mode = InputUtils.get_uint('Введите номер режима (1-3): ')

    if mode == 1:
        InputGenerator.randomize(30, -100, 100)
    elif mode == 2:
        InputGenerator.tangens(0.01, -3, 3)
    elif mode == 3:
        InputGenerator.user_input()

    while True:
        pass


if __name__ == '__main__':
    main()
